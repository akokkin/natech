{
	"info": {
		"_postman_id": "dd3e61d0-f251-453e-beb2-d52a1bf579ee",
		"name": "Natech",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19911314"
	},
	"item": [
		{
			"name": "Create new Repository",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"BaseUrl\", \"https://api.github.com\");\r",
							"\r",
							"function randomString(length = 1) {\r",
							"    let randomString = \"\";\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        randomString += pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\");\r",
							"    }\r",
							"    return randomString;\r",
							"};\r",
							"\r",
							"pm.environment.set(\"random_repo_name\", `test_repo_${randomString(8)}`);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201-Repo was created\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{random_repo_name}}\",\r\n  \"description\": \"This is a test repository created by Postman\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/user/repos",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"user",
						"repos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve Repository",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(() => { }, 1000);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200-Repo was retrieved\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BaseUrl}}/repos/akokkin/{{random_repo_name}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"repos",
						"akokkin",
						"{{random_repo_name}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Issue In Repository",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201-Issue was created\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Found a bug\",\r\n  \"body\": \"This issue has been automatically created by Postman.\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/repos/akokkin/{{random_repo_name}}/issues",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"repos",
						"akokkin",
						"{{random_repo_name}}",
						"issues"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve Issue",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200-Repo was retrieved\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Issue title is 'Found a bug'\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.title).eqls(\"Found a bug\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BaseUrl}}/repos/akokkin/{{random_repo_name}}/issues/1",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"repos",
						"akokkin",
						"{{random_repo_name}}",
						"issues",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Repository",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204-Repo was deleted\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BaseUrl}}/repos/akokkin/{{random_repo_name}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"repos",
						"akokkin",
						"{{random_repo_name}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve Repository (Negative)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(() => { }, 1000);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404-Repo was already deleted\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.environment.clear();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BaseUrl}}/repos/akokkin/{{random_repo_name}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"repos",
						"akokkin",
						"{{random_repo_name}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "token",
			"value": "",
			"type": "default"
		}
	]
}